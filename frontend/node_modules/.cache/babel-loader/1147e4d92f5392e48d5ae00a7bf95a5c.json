{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\khale\\\\Desktop\\\\FastAPI-React\\\\frontend\\\\src\\\\components\\\\Body.jsx\";\nimport Transcription from \"./Transcription\";\nimport Handwriting from \"./Handwiriting\";\nimport Voice from \"./Voice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Body = ({\n  selectBody\n}) => {\n  const postTranscription = async ({\n    input,\n    output,\n    language,\n    speech\n  }) => {\n    try {\n      const res = await fetch('http://localhost:8000/', {\n        method: 'POST',\n        mode: 'no-cors',\n        headers: {\n          'Accept': 'application/json',\n          'Content-type': 'application/json'\n        },\n        body: JSON.stringify({\n          input,\n          output,\n          language,\n          speech\n        })\n      });\n      console.log('Result : ' + res);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  switch (selectBody.text) {\n    case 'Transcription':\n      return /*#__PURE__*/_jsxDEV(Transcription, {\n        onSubmit: () => postTranscription\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 15\n      }, this);\n      break;\n\n    case 'Handwriting Recognition':\n      return /*#__PURE__*/_jsxDEV(Handwriting, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 15\n      }, this);\n      break;\n\n    case 'Voice Recognition':\n      return /*#__PURE__*/_jsxDEV(Voice, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 15\n      }, this);\n      break;\n\n    default:\n      return /*#__PURE__*/_jsxDEV(Transcription, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 15\n      }, this);\n  }\n}; //We initialize the Body to the transcription part\n\n\n_c = Body;\nBody.defaultProps = {\n  selectBody: 'Transcription'\n};\nexport default Body;\n\nvar _c;\n\n$RefreshReg$(_c, \"Body\");","map":{"version":3,"sources":["C:/Users/khale/Desktop/FastAPI-React/frontend/src/components/Body.jsx"],"names":["Transcription","Handwriting","Voice","Body","selectBody","postTranscription","input","output","language","speech","res","fetch","method","mode","headers","body","JSON","stringify","console","log","e","text","defaultProps"],"mappings":";AAAA,OAAOA,aAAP,MAA0B,iBAA1B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,KAAP,MAAkB,SAAlB;;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAoB;AAE/B,QAAMC,iBAAiB,GAAG,OAAO;AAACC,IAAAA,KAAD;AAAOC,IAAAA,MAAP;AAAcC,IAAAA,QAAd;AAAuBC,IAAAA;AAAvB,GAAP,KAA0C;AAElE,QAAG;AACD,YAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,wBAAD,EAA2B;AAChDC,QAAAA,MAAM,EAAE,MADwC;AAEhDC,QAAAA,IAAI,EAAG,SAFyC;AAGhDC,QAAAA,OAAO,EAAE;AACP,oBAAU,kBADH;AAEP,0BAAgB;AAFT,SAHuC;AAOhDC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACX,UAAAA,KAAD;AAAOC,UAAAA,MAAP;AAAcC,UAAAA,QAAd;AAAuBC,UAAAA;AAAvB,SAAf;AAP0C,OAA3B,CAAvB;AASAS,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAaT,GAAzB;AACD,KAXD,CAYA,OAAOU,CAAP,EAAS;AACPF,MAAAA,OAAO,CAACC,GAAR,CAAYC,CAAZ;AACD;AACF,GAjBD;;AAoBA,UAAQhB,UAAU,CAACiB,IAAnB;AACE,SAAK,eAAL;AACE,0BAAQ,QAAC,aAAD;AAAe,QAAA,QAAQ,EAAG,MAAIhB;AAA9B;AAAA;AAAA;AAAA;AAAA,cAAR;AACA;;AACF,SAAK,yBAAL;AACE,0BAAQ,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,cAAR;AACA;;AACF,SAAK,mBAAL;AACE,0BAAQ,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,cAAR;AACA;;AACF;AACE,0BAAQ,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,cAAR;AAXJ;AAcD,CApCD,C,CAsCA;;;KAtCMF,I;AAuCNA,IAAI,CAACmB,YAAL,GAAoB;AAClBlB,EAAAA,UAAU,EAAE;AADM,CAApB;AAIA,eAAeD,IAAf","sourcesContent":["import Transcription from \"./Transcription\"\r\nimport Handwriting from \"./Handwiriting\"\r\nimport Voice from \"./Voice\"\r\n\r\nconst Body = ({ selectBody }) => {\r\n\r\n  const postTranscription = async ({input,output,language,speech}) => {\r\n\r\n    try{\r\n      const res = await fetch('http://localhost:8000/', {\r\n        method: 'POST',\r\n        mode : 'no-cors',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-type': 'application/json',\r\n        },\r\n        body: JSON.stringify({input,output,language,speech}),\r\n      })\r\n      console.log('Result : '+ res)\r\n    }\r\n    catch (e){\r\n      console.log(e)\r\n    }\r\n  }\r\n\r\n\r\n  switch (selectBody.text) {\r\n    case 'Transcription':\r\n      return (<Transcription onSubmit= {()=>postTranscription}/>);\r\n      break;\r\n    case 'Handwriting Recognition':\r\n      return (<Handwriting />)\r\n      break;\r\n    case 'Voice Recognition':\r\n      return (<Voice />)\r\n      break;\r\n    default:\r\n      return (<Transcription />);\r\n  }\r\n   \r\n}\r\n\r\n//We initialize the Body to the transcription part\r\nBody.defaultProps = {\r\n  selectBody: 'Transcription',\r\n}\r\n\r\nexport default Body\r\n"]},"metadata":{},"sourceType":"module"}